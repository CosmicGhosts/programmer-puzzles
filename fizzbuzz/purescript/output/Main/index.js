// Generated by psc version 0.7.4.1
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Array = require("Data.Array");
var Data_Either = require("Data.Either");
var Data_Foreign = require("Data.Foreign");
var Node_Yargs = require("Node.Yargs");
var Node_Yargs_Setup = require("Node.Yargs.Setup");
var Node_Yargs_Applicative = require("Node.Yargs.Applicative");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Fizz = (function () {
    function Fizz() {

    };
    Fizz.value = new Fizz();
    return Fizz;
})();
var Buzz = (function () {
    function Buzz() {

    };
    Buzz.value = new Buzz();
    return Buzz;
})();
var FizzBuzz = (function () {
    function FizzBuzz() {

    };
    FizzBuzz.value = new FizzBuzz();
    return FizzBuzz;
})();
var Num = (function () {
    function Num(value0) {
        this.value0 = value0;
    };
    Num.create = function (value0) {
        return new Num(value0);
    };
    return Num;
})();
var showNoisyNum = new Prelude.Show(function (_1) {
    if (_1 instanceof Fizz) {
        return "Fizz";
    };
    if (_1 instanceof Buzz) {
        return "Buzz";
    };
    if (_1 instanceof FizzBuzz) {
        return "FizzBuzz";
    };
    if (_1 instanceof Num) {
        return Prelude.show(Prelude.showInt)(_1.value0);
    };
    throw new Error("Failed pattern match at Main line 19, column 1 - line 25, column 1: " + [ _1.constructor.name ]);
});
var isDivisible = function (divisor) {
    return function (n) {
        return n % divisor === 0;
    };
};
var fizzBuzz = function (div1) {
    return function (div2) {
        return function (n) {
            if (isDivisible(div1)(n) && isDivisible(div2)(n)) {
                return FizzBuzz.value;
            };
            if (isDivisible(div1)(n)) {
                return Fizz.value;
            };
            if (isDivisible(div2)(n)) {
                return Buzz.value;
            };
            if (Prelude.otherwise) {
                return new Num(n);
            };
            throw new Error("Failed pattern match at Main line 25, column 1 - line 26, column 1: " + [ div1.constructor.name, div2.constructor.name, n.constructor.name ]);
        };
    };
};
var app = function (_0) {
    if (_0.length === 0) {
        return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
    };
    if (_0.length === 1) {
        return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
    };
    if (_0.length === 2) {
        return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
    };
    if (_0.length === 3) {
        return Control_Monad_Eff_Console.print(Prelude.showString)(Prelude.show(Prelude.showArray(Prelude.showString))(Prelude.map(Prelude.functorArray)(function (n) {
            return Prelude.show(showNoisyNum)(fizzBuzz(3)(5)(n));
        })(Data_Array[".."](1)(100))));
    };
    throw new Error("Failed pattern match at Main line 34, column 1 - line 35, column 1: " + [ _0.constructor.name ]);
};
var main = (function () {
    var setup = Prelude["<>"](Node_Yargs_Setup.semigroupYargsSetup)(Node_Yargs_Setup.usage("$0 Word1 Word2"))(Node_Yargs_Setup.example("$0 Hello -w World")("Say hello!"));
    return Node_Yargs_Applicative.runY(setup)(Prelude["<$>"](Node_Yargs_Applicative.functorY)(app)(Node_Yargs_Applicative.yarg(Node_Yargs_Applicative.argStrings)("w")([ "word" ])(new Data_Maybe.Just("A word"))(new Data_Either.Right("At least one word is required"))(false)));
})();
module.exports = {
    Fizz: Fizz, 
    Buzz: Buzz, 
    FizzBuzz: FizzBuzz, 
    Num: Num, 
    main: main, 
    app: app, 
    isDivisible: isDivisible, 
    fizzBuzz: fizzBuzz, 
    showNoisyNum: showNoisyNum
};
